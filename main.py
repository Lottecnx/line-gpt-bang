from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, RedirectResponse
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageMessage
import openai
import os
import json
from datetime import datetime
from collections import defaultdict
import random
import requests

app = FastAPI()

# API Keys
line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))
openai.api_key = os.getenv("OPENAI_API_KEY")
IMGUR_CLIENT_ID = os.getenv("IMGUR_CLIENT_ID")

# User data
user_logs = defaultdict(list)
user_quota = {}
user_latest_image = {}
MAX_MESSAGES_PER_DAY = 20

# Shopee Affiliate Links
affiliate_links = {
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": "https://s.shopee.co.th/8zrT7bBLKl",
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": "https://s.shopee.co.th/AUgGuu4tJk"
}
category_keywords = {
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": ["‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î", "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á"],
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": ["‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏≠‡∏õ", "‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡πÄ‡∏î‡∏£‡∏™"]
}

def find_affiliate_link(text):
    for category, keywords in category_keywords.items():
        if any(k in text for k in keywords):
            return f"\n\n‡∏•‡∏≠‡∏á‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ {affiliate_links[category]}"
    return ""

def check_quota(user_id):
    today = datetime.now().date()
    if user_id not in user_quota or user_quota[user_id]["date"] != today:
        user_quota[user_id] = {"date": today, "count": 0}
    if user_quota[user_id]["count"] < MAX_MESSAGES_PER_DAY:
        user_quota[user_id]["count"] += 1
        return True
    return False

def get_response(user_id, user_text):
    user_logs[user_id].append(user_text)

    if "‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î" in user_text:
        category = random.choice(list(affiliate_links.keys()))
        return f"‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏ö‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏°‡∏ß‡∏î: {category} üî•\nüëâ {affiliate_links[category]}"

    if user_text.lower().startswith("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û") and user_id in user_latest_image:
        latest_image_url = user_latest_image[user_id]
        redirect_url = f"https://yourdomain.com/redirect?img={latest_image_url}"
        return f"‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üé®\n‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ {redirect_url}"

    messages = [{"role": "system", "content": '''
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏ö‡∏±‡∏á' ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô
- ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏Å
'''}]
    for msg in user_logs[user_id][-5:]:
        messages.append({"role": "user", "content": msg})

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages
    )
    reply = response["choices"][0]["message"]["content"].strip()
    reply += find_affiliate_link(user_text)
    return reply

def upload_to_imgur(image_bytes):
    url = "https://api.imgur.com/3/image"
    headers = {"Authorization": f"Client-ID {IMGUR_CLIENT_ID}"}
    files = {"image": image_bytes}
    response = requests.post(url, headers=headers, files=files)
    if response.status_code == 200:
        return response.json()["data"]["link"]
    return None

@app.post("/webhook")
async def callback(request: Request):
    body = await request.body()
    signature = request.headers.get("X-Line-Signature")
    try:
        handler.handle(body.decode(), signature)
    except Exception as e:
        print(">>> Error:", e)
    return JSONResponse(content={"status": "ok"})

@handler.add(MessageEvent, message=TextMessage)
def handle_text(event):
    user_text = event.message.text.strip()
    user_id = event.source.user_id
    print(f">>> {user_id}: {user_text}")

    if not check_quota(user_id):
        reply_text = "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö 20 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üò¢\n‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!"
    else:
        try:
            reply_text = get_response(user_id, user_text)
        except Exception as e:
            print(">>> GPT Error:", e)
            reply_text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏±‡∏á‡∏¢‡∏±‡∏á‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ üß†"

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))

@handler.add(MessageEvent, message=ImageMessage)
def handle_image(event):
    user_id = event.source.user_id
    message_id = event.message.id
    content = line_bot_api.get_message_content(message_id)
    image_data = b''.join(content.iter_content())

    imgur_url = upload_to_imgur(image_data)
    if imgur_url:
        user_latest_image[user_id] = imgur_url
        reply_text = "‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üì∑\n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏™‡∏∑‡πâ‡∏≠' ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"
    else:
        reply_text = "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))

@app.get("/redirect")
async def redirect_with_affiliate(img: str):
    affiliate_link = "https://s.shopee.co.th/8zrT7bBLKl"
    return RedirectResponse(url=f"{affiliate_link}?target={img}")
