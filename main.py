from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, RedirectResponse
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage, ImageMessage
import openai
import os
import json
from datetime import datetime
from collections import defaultdict
import random
import requests

app = FastAPI()

# API Key
line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))
openai.api_key = os.getenv("OPENAI_API_KEY")
IMGUR_CLIENT_ID = os.getenv("IMGUR_CLIENT_ID")

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
user_logs = defaultdict(list)
user_quota = {}
user_latest_image = {}  # ‡∏à‡∏≥‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ user
MAX_MESSAGES_PER_DAY = 20

# ‡∏•‡∏¥‡∏á‡∏Å‡πå Affiliate Shopee
affiliate_links = {
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": "https://s.shopee.co.th/8zrT7bBLKl",
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": "https://s.shopee.co.th/AUgGuu4tJk",
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß": "https://s.shopee.co.th/6pn0mo0IPC",
    "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": "https://s.shopee.co.th/9pQcMPzJ5S",
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤": "https://s.shopee.co.th/VsxFNIoNU",
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": "https://s.shopee.co.th/LZX3IMFKa",
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": "https://s.shopee.co.th/3fpz1UdQUH",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö": "https://s.shopee.co.th/5fb3PDunCb",
    "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤": "https://s.shopee.co.th/1qOKqFpHn6",
    "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": "https://s.shopee.co.th/7pfXzLIvHW",
    "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå": "https://s.shopee.co.th/3AtiQoUBQY",
    "‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏•‡πá‡∏ï": "https://s.shopee.co.th/10pDqtS14q",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": "https://s.shopee.co.th/6fTabPLcRN",
    "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ": "https://s.shopee.co.th/3LD8dL6IKX",
    "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û": "https://s.shopee.co.th/4fiWDtLTtI",
    "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°": "https://s.shopee.co.th/2qGs2a53J2",
    "‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å": "https://s.shopee.co.th/40SpQnXIc4",
    "‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á": "https://s.shopee.co.th/VsxGQacXn",
    "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á": "https://s.shopee.co.th/4L5fpXcHlQ",
    "‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°": "https://s.shopee.co.th/2LKbRvUjzF",
    "‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå": "https://s.shopee.co.th/10pDrXCCbA",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å": "https://s.shopee.co.th/5VHdDqybQb",
    "‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏≥‡∏ô‡∏±‡∏•": "https://s.shopee.co.th/60DtoqH5Au"
}

category_keywords = {
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": ["‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î", "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á"],
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": ["‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏≠‡∏õ", "‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡πÄ‡∏î‡∏£‡∏™"],
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß": ["‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏™‡∏Å‡∏¥‡∏ô‡πÅ‡∏Ñ‡∏£‡πå", "‡∏•‡∏¥‡∏õ‡∏™‡∏ï‡∏¥‡∏Å"],
    "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": ["‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"],
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤": ["‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡∏∞‡∏û‡∏≤‡∏¢", "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô"],
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": ["‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡∏™‡πâ‡∏ô‡∏™‡∏π‡∏á"],
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": ["‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏á"],
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö": ["‡∏Å‡∏≥‡πÑ‡∏•", "‡πÅ‡∏´‡∏ß‡∏ô", "‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π", "‡∏à‡∏¥‡∏ß‡πÄ‡∏ß‡∏•‡∏£‡∏µ‡πà"],
    "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤": ["‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤", "‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤"],
    "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": ["‡∏´‡∏°‡∏≠‡∏ô", "‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏ô", "‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô"],
    "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå": ["‡∏´‡∏π‡∏ü‡∏±‡∏á", "‡∏•‡∏≥‡πÇ‡∏û‡∏á", "‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå"],
    "‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏•‡πá‡∏ï": ["‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡πÑ‡∏≠‡πÇ‡∏ü‡∏ô"],
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": ["‡∏û‡∏±‡∏î‡∏•‡∏°", "‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÄ‡∏ß‡∏ü", "‡∏´‡∏°‡πâ‡∏≠‡∏ó‡∏≠‡∏î"],
    "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ": ["‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å", "‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ", "PC"],
    "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û": ["‡∏Å‡∏•‡πâ‡∏≠‡∏á", "‡πÄ‡∏•‡∏ô‡∏™‡πå", "‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á"],
    "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°": ["‡∏Ç‡∏ô‡∏°", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "‡∏Å‡∏≤‡πÅ‡∏ü"],
    "‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å": ["‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô", "‡∏ú‡πâ‡∏≤‡∏≠‡πâ‡∏≠‡∏°", "‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å"],
    "‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á": ["‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", "‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™", "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô"],
    "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á": ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏°‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏°‡∏≤", "‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"],
    "‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°": ["‡πÄ‡∏Å‡∏°", "‡∏à‡∏≠‡∏¢", "‡πÄ‡∏û‡∏•‡∏¢‡πå"]
}

def find_affiliate_link(text):
    for category, keywords in category_keywords.items():
        if any(k in text for k in keywords):
            return f"\n\n‡∏•‡∏≠‡∏á‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ {affiliate_links[category]}"
    return ""

def check_quota(user_id):
    today = datetime.now().date()
    if user_id not in user_quota or user_quota[user_id]["date"] != today:
        user_quota[user_id] = {"date": today, "count": 0}
    if user_quota[user_id]["count"] < MAX_MESSAGES_PER_DAY:
        user_quota[user_id]["count"] += 1
        return True
    return False

def upload_to_imgur(image_data):
    url = "https://api.imgur.com/3/image"
    headers = {"Authorization": f"Client-ID {IMGUR_CLIENT_ID}"}
    response = requests.post(url, headers=headers, files={"image": image_data})
    if response.status_code == 200:
        return response.json()["data"]["link"]
    return None

def get_response(user_id, user_text):
    user_logs[user_id].append(user_text)

    if "‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î" in user_text:
        category = random.choice(list(affiliate_links.keys()))
        return f"‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏ö‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏°‡∏ß‡∏î: {category} üî•\nüëâ {affiliate_links[category]}"

    if "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û" in user_text and user_id in user_latest_image:
        latest_image_url = user_latest_image[user_id]
        redirect_url = f"https://your-project-name.onrender.com/redirect?img={latest_image_url}"
        return f"‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üé®\n‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ {redirect_url}"

    messages = [{"role": "system", "content": '''
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏ö‡∏±‡∏á' ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô
- ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏Å
'''}]
    for msg in user_logs[user_id][-5:]:
        messages.append({"role": "user", "content": msg})

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages
    )
    reply = response["choices"][0]["message"]["content"].strip()
    reply += find_affiliate_link(user_text)
    return reply

@app.post("/webhook")
async def callback(request: Request):
    body = await request.body()
    signature = request.headers.get("X-Line-Signature")
    try:
        handler.handle(body.decode(), signature)
    except Exception as e:
        print(">>> Error:", e)
    return JSONResponse(content={"status": "ok"})

@handler.add(MessageEvent, message=TextMessage)
def handle_text(event):
    user_text = event.message.text.strip()
    user_id = event.source.user_id
    print(f">>> {user_id}: {user_text}")

    if not check_quota(user_id):
        reply_text = "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö 20 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üò¢\n‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!"
    else:
        try:
            reply_text = get_response(user_id, user_text)
        except Exception as e:
            print(">>> GPT Error:", e)
            reply_text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏±‡∏á‡∏¢‡∏±‡∏á‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ üß†"

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))

@handler.add(MessageEvent, message=ImageMessage)
def handle_image(event):
    user_id = event.source.user_id
    message_id = event.message.id
    image_content = line_bot_api.get_message_content(message_id).content
    imgur_url = upload_to_imgur(image_content)
    if imgur_url:
        user_latest_image[user_id] = imgur_url
        reply_text = "‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üì∑\n‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û"
    else:
        reply_text = "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))

@app.get("/redirect")
async def redirect_image(img: str):
    if not img.startswith("http"):
        return {"error": "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}
    return RedirectResponse(url=img)
