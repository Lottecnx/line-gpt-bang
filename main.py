from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import openai
import os
import json
from datetime import datetime, timedelta
from collections import defaultdict
import random
import asyncio

app = FastAPI()

# ‡∏î‡∏∂‡∏á KEY ‡∏à‡∏≤‡∏Å Environment
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)
openai.api_key = OPENAI_API_KEY

# -------------------------------
# ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
user_logs = defaultdict(list)
user_quota = {}
premium_users = {}
MAX_MESSAGES_PER_DAY = 20

# -------------------------------
# ‡∏•‡∏¥‡∏á‡∏Å‡πå Affiliate + ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
affiliate_links = {
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": "https://s.shopee.co.th/8zrT7bBLKl",
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": "https://s.shopee.co.th/AUgGuu4tJk",
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß": "https://s.shopee.co.th/6pn0mo0IPC",
    "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": "https://s.shopee.co.th/9pQcMPzJ5S",
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤": "https://s.shopee.co.th/VsxFNIoNU",
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": "https://s.shopee.co.th/LZX3IMFKa",
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": "https://s.shopee.co.th/3fpz1UdQUH",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö": "https://s.shopee.co.th/5fb3PDunCb",
    "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤": "https://s.shopee.co.th/1qOKqFpHn6",
    "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": "https://s.shopee.co.th/7pfXzLIvHW",
    "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå": "https://s.shopee.co.th/3AtiQoUBQY",
    "‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏•‡πá‡∏ï": "https://s.shopee.co.th/10pDqtS14q",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": "https://s.shopee.co.th/6fTabPLcRN",
    "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ": "https://s.shopee.co.th/3LD8dL6IKX",
    "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û": "https://s.shopee.co.th/4fiWDtLTtI",
    "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°": "https://s.shopee.co.th/2qGs2a53J2",
    "‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å": "https://s.shopee.co.th/40SpQnXIc4",
    "‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á": "https://s.shopee.co.th/VsxGQacXn",
    "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á": "https://s.shopee.co.th/4L5fpXcHlQ",
    "‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°": "https://s.shopee.co.th/2LKbRvUjzF",
    "‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå": "https://s.shopee.co.th/10pDrXCCbA",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å": "https://s.shopee.co.th/5VHdDqybQb",
    "‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏≥‡∏ô‡∏±‡∏•": "https://s.shopee.co.th/60DtoqH5Au"
}
category_keywords = {
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": ["‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î", "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á"],
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": ["‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏≠‡∏õ", "‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡πÄ‡∏î‡∏£‡∏™"],
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß": ["‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏™‡∏Å‡∏¥‡∏ô‡πÅ‡∏Ñ‡∏£‡πå", "‡∏•‡∏¥‡∏õ‡∏™‡∏ï‡∏¥‡∏Å"],
    "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": ["‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"],
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤": ["‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡∏∞‡∏û‡∏≤‡∏¢", "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô"],
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": ["‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡∏™‡πâ‡∏ô‡∏™‡∏π‡∏á"],
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": ["‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏á"],
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö": ["‡∏Å‡∏≥‡πÑ‡∏•", "‡πÅ‡∏´‡∏ß‡∏ô", "‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π", "‡∏à‡∏¥‡∏ß‡πÄ‡∏ß‡∏•‡∏£‡∏µ‡πà"],
    "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤": ["‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤", "‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤"],
    "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": ["‡∏´‡∏°‡∏≠‡∏ô", "‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏ô", "‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô"],
    "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå": ["‡∏´‡∏π‡∏ü‡∏±‡∏á", "‡∏•‡∏≥‡πÇ‡∏û‡∏á", "‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå"],
    "‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏•‡πá‡∏ï": ["‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡πÑ‡∏≠‡πÇ‡∏ü‡∏ô"],
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": ["‡∏û‡∏±‡∏î‡∏•‡∏°", "‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÄ‡∏ß‡∏ü", "‡∏´‡∏°‡πâ‡∏≠‡∏ó‡∏≠‡∏î"],
    "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ": ["‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å", "‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ", "PC"],
    "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û": ["‡∏Å‡∏•‡πâ‡∏≠‡∏á", "‡πÄ‡∏•‡∏ô‡∏™‡πå", "‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á"],
    "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°": ["‡∏Ç‡∏ô‡∏°", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "‡∏Å‡∏≤‡πÅ‡∏ü"],
    "‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å": ["‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô", "‡∏ú‡πâ‡∏≤‡∏≠‡πâ‡∏≠‡∏°", "‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å"],
    "‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á": ["‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", "‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™", "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô"],
    "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á": ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏°‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏°‡∏≤", "‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"],
    "‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°": ["‡πÄ‡∏Å‡∏°", "‡∏à‡∏≠‡∏¢", "‡πÄ‡∏û‡∏•‡∏¢‡πå"],
    "‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå": ["‡∏¢‡∏≤‡∏á‡∏£‡∏ñ", "‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏ñ", "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå"],
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å": ["‡∏õ‡∏≤‡∏Å‡∏Å‡∏≤", "‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠", "‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å"],
    "‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏≥‡∏ô‡∏±‡∏•": ["‡∏ö‡∏±‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç", "‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á"]
}

# -------------------------------
# SYSTEM PROMPT
system_prompt = """
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ '‡∏ö‡∏±‡∏á' ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ï‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏â‡∏•‡∏≤‡∏î ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏ã‡πâ‡∏≥ ‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏£‡∏á ‡πÜ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå Shopee ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û

‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ "‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏°‡∏ß‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå
‡∏ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ "‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Premium", "‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏≠‡∏ô" ‚Üí ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô Premium 30 ‡∏ß‡∏±‡∏ô
"""

# -------------------------------
def find_affiliate_link(text):
    for category, keywords in category_keywords.items():
        if any(k in text for k in keywords):
            return f"\n\n‡∏•‡∏≠‡∏á‡∏î‡∏π‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà üëâ {affiliate_links[category]}"
    return ""

def check_quota(user_id):
    today = datetime.now().date()
    if user_id in premium_users and premium_users[user_id] >= today:
        return True
    if user_id not in user_quota or user_quota[user_id]["date"] != today:
        user_quota[user_id] = {"date": today, "count": 0}
    if user_quota[user_id]["count"] < MAX_MESSAGES_PER_DAY:
        user_quota[user_id]["count"] += 1
        return True
    return False

async def chat_with_gpt(user_id, user_text):
    if user_id not in user_logs:
        user_logs[user_id] = []

    user_logs[user_id].append(user_text)

    if "‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î" in user_text:
        category = random.choice(list(affiliate_links.keys()))
        return f"‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏ö‡∏±‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏°‡∏ß‡∏î: {category} üî•\nüëâ {affiliate_links[category]}"

    messages = [{"role": "system", "content": system_prompt}]
    for msg in user_logs[user_id][-5:]:
        messages.append({"role": "user", "content": msg})

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.8
    )
    reply = response["choices"][0]["message"]["content"].strip()
    reply += find_affiliate_link(user_text)
    return reply

# -------------------------------
@app.post("/webhook")
async def callback(request: Request):
    body = await request.body()
    body_str = body.decode("utf-8")
    json_body = json.loads(body_str)
    print("\n>>> Webhook Received:", json.dumps(json_body, indent=2, ensure_ascii=False))

    signature = request.headers.get("X-Line-Signature")
    try:
        handler.handle(body_str, signature)
    except Exception as e:
        print(">>> Error in handler:", e)
    return JSONResponse(content={"status": "ok"})

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_text = event.message.text.strip()
    user_id = event.source.user_id
    today = datetime.now().date()
    print(f"\n>>> Message from {user_id}: {user_text}")

    # Premium
    if "‡∏™‡∏°‡∏±‡∏Ñ‡∏£ premium" in user_text.lower():
        reply_text = (
            "‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Premium ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö üéâ\n"
            "‡πÇ‡∏≠‡∏ô 59 ‡∏ö‡∏≤‡∏ó ‡∏°‡∏≤‡∏ó‡∏µ‡πà:\n"
            "üè¶ ‡∏ò.‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û 6130393776 (‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏™‡∏¥‡∏£‡∏¥‡∏ß‡∏±‡∏í‡∏£‡πå)\n"
            "üì± ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå 0803179007\n\n"
            "‡∏û‡∏≠‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏≠‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß' ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!"
        )
    elif "‡πÇ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß" in user_text or "‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏≠‡∏ô" in user_text:
        premium_users[user_id] = today + timedelta(days=30)
        reply_text = f"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ö‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Premium ‡πÅ‡∏•‡πâ‡∏ß üéâ ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ñ‡∏∂‡∏á {premium_users[user_id]}"
    elif user_id in premium_users and premium_users[user_id] == today + timedelta(days=1):
        reply_text = "üìå Premium ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
    elif not check_quota(user_id):
        reply_text = "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö 20 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üò¢\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ '‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Premium'"
    else:
        reply_text = asyncio.run(chat_with_gpt(user_id, user_text))

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply_text)
    )
