from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage, FlexSendMessage
import openai
import os
import json
from datetime import datetime
from collections import defaultdict
import random

app = FastAPI()

# API Key
line_bot_api = LineBotApi(os.getenv("LINE_CHANNEL_ACCESS_TOKEN"))
handler = WebhookHandler(os.getenv("LINE_CHANNEL_SECRET"))
openai.api_key = os.getenv("OPENAI_API_KEY")

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
user_logs = defaultdict(list)
user_quota = {}
MAX_MESSAGES_PER_DAY = 20

# ‡∏•‡∏¥‡∏á‡∏Å‡πå Affiliate Shopee
affiliate_links = {
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": "https://s.shopee.co.th/8zrT7bBLKl",
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": "https://s.shopee.co.th/AUgGuu4tJk",
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß": "https://s.shopee.co.th/6pn0mo0IPC",
    "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": "https://s.shopee.co.th/9pQcMPzJ5S",
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤": "https://s.shopee.co.th/VsxFNIoNU",
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": "https://s.shopee.co.th/LZX3IMFKa",
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": "https://s.shopee.co.th/3fpz1UdQUH",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö": "https://s.shopee.co.th/5fb3PDunCb",
    "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤": "https://s.shopee.co.th/1qOKqFpHn6",
    "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": "https://s.shopee.co.th/7pfXzLIvHW",
    "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå": "https://s.shopee.co.th/3AtiQoUBQY",
    "‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏•‡πá‡∏ï": "https://s.shopee.co.th/10pDqtS14q",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": "https://s.shopee.co.th/6fTabPLcRN",
    "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ": "https://s.shopee.co.th/3LD8dL6IKX",
    "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û": "https://s.shopee.co.th/4fiWDtLTtI",
    "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°": "https://s.shopee.co.th/2qGs2a53J2",
    "‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å": "https://s.shopee.co.th/40SpQnXIc4",
    "‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á": "https://s.shopee.co.th/VsxGQacXn",
    "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á": "https://s.shopee.co.th/4L5fpXcHlQ",
    "‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°": "https://s.shopee.co.th/2LKbRvUjzF",
    "‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå": "https://s.shopee.co.th/10pDrXCCbA",
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å": "https://s.shopee.co.th/5VHdDqybQb",
    "‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏≥‡∏ô‡∏±‡∏•": "https://s.shopee.co.th/60DtoqH5Au"
}

category_keywords = {
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": ["‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏¢‡∏∑‡∏î", "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á"],
    "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": ["‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏≠‡∏õ", "‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á", "‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡πÄ‡∏î‡∏£‡∏™"],
    "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß": ["‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏™‡∏Å‡∏¥‡∏ô‡πÅ‡∏Ñ‡∏£‡πå", "‡∏•‡∏¥‡∏õ‡∏™‡∏ï‡∏¥‡∏Å"],
    "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û": ["‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°", "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"],
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤": ["‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏™‡∏∞‡∏û‡∏≤‡∏¢", "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô"],
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ç‡∏¥‡∏á": ["‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á", "‡∏™‡πâ‡∏ô‡∏™‡∏π‡∏á"],
    "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ä‡∏≤‡∏¢": ["‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢", "‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏á"],
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö": ["‡∏Å‡∏≥‡πÑ‡∏•", "‡πÅ‡∏´‡∏ß‡∏ô", "‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏π", "‡∏à‡∏¥‡∏ß‡πÄ‡∏ß‡∏•‡∏£‡∏µ‡πà"],
    "‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤": ["‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤", "‡πÅ‡∏ß‡πà‡∏ô‡∏ï‡∏≤"],
    "‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": ["‡∏´‡∏°‡∏≠‡∏ô", "‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏ô", "‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏á‡∏ö‡πâ‡∏≤‡∏ô"],
    "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå": ["‡∏´‡∏π‡∏ü‡∏±‡∏á", "‡∏•‡∏≥‡πÇ‡∏û‡∏á", "‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå"],
    "‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏•‡πá‡∏ï": ["‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠", "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡πÑ‡∏≠‡πÇ‡∏ü‡∏ô"],
    "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô": ["‡∏û‡∏±‡∏î‡∏•‡∏°", "‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡πÄ‡∏ß‡∏ü", "‡∏´‡∏°‡πâ‡∏≠‡∏ó‡∏≠‡∏î"],
    "‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ": ["‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å", "‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ", "PC"],
    "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û": ["‡∏Å‡∏•‡πâ‡∏≠‡∏á", "‡πÄ‡∏•‡∏ô‡∏™‡πå", "‡∏Ç‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á"],
    "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°": ["‡∏Ç‡∏ô‡∏°", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "‡∏Å‡∏≤‡πÅ‡∏ü"],
    "‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å": ["‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô", "‡∏ú‡πâ‡∏≤‡∏≠‡πâ‡∏≠‡∏°", "‡πÅ‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å"],
    "‡∏Å‡∏µ‡∏¨‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á": ["‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", "‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™", "‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô"],
    "‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á": ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏°‡∏ß", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏°‡∏≤", "‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á"],
    "‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°": ["‡πÄ‡∏Å‡∏°", "‡∏à‡∏≠‡∏¢", "‡πÄ‡∏û‡∏•‡∏¢‡πå"]
}

def find_affiliate_link(text):
    for category, keywords in category_keywords.items():
        if any(k in text for k in keywords):
            return affiliate_links[category]
    return list(affiliate_links.values())[0]

def generate_image(prompt):
    try:
        response = openai.Image.create(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        return response["data"][0]["url"]
    except Exception as e:
        print(">>> Image Generation Error:", e)
        return None

@app.post("/webhook")
async def callback(request: Request):
    body = await request.body()
    signature = request.headers.get("X-Line-Signature")
    try:
        handler.handle(body.decode(), signature)
    except Exception as e:
        print(">>> Error:", e)
    return JSONResponse(content={"status": "ok"})

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_text = event.message.text.strip()
    user_id = event.source.user_id
    print(f">>> {user_id}: {user_text}")

    if not check_quota(user_id):
        reply_text = (
            "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö 20 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üò¢\n"
            "‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Premium ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î!"
        )
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=reply_text)
        )
        return

    if user_text.startswith("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û") or user_text.startswith("‡∏ß‡∏≤‡∏î"):
        prompt = user_text.replace("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û", "").replace("‡∏ß‡∏≤‡∏î", "").strip()
        image_url = generate_image(prompt)
        if image_url:
            affiliate_url = find_affiliate_link(user_text)
            full_page_url = f"https://sparkling-bienenstitch-535530.netlify.app/?img={image_url}&link={affiliate_url}"

            flex = {
                "type": "bubble",
                "hero": {
                    "type": "image",
                    "url": image_url,
                    "size": "full",
                    "aspectRatio": "1:1",
                    "aspectMode": "cover"
                },
                "body": {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                        {
                            "type": "text",
                            "text": "‡∏î‡∏π‡∏†‡∏≤‡∏û‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î",
                            "weight": "bold",
                            "size": "md"
                        },
                        {
                            "type": "button",
                            "style": "primary",
                            "action": {
                                "type": "uri",
                                "label": "‡∏Å‡∏î‡∏î‡∏π‡πÄ‡∏•‡∏¢",
                                "uri": full_page_url
                            },
                            "margin": "lg"
                        }
                    ]
                }
            }
            line_bot_api.reply_message(
                event.reply_token,
                FlexSendMessage(alt_text="‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á", contents=flex)
            )
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞")
            )
        return

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text="‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û ‡∏´‡∏°‡∏≤‡πÉ‡∏™‡πà‡πÅ‡∏ß‡πà‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏î' ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö")
    )
